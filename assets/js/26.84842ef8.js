(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{304:function(e,t,v){"use strict";v.r(t);var n=v(13),a=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"webapi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webapi"}},[e._v("#")]),e._v(" WebAPI")]),e._v(" "),t("h2",{attrs:{id:"_1、-什么是-dom-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-什么是-dom-必会"}},[e._v("#")]),e._v(" 1、 什么是 dom?(必会)")]),e._v(" "),t("p",[e._v("什么是 dom\n1、DOM 是 W3C(万维网联盟)的标准\n2、DOM 定义了访问 HTML 和 XML 文档的标准\n什么是 W3C\n1、“W3C 文档对象模型 (DOM) 是中立于平台和语言的接口，它允许程序和脚本动")]),e._v(" "),t("p",[e._v("态地访问和更新文档的内容、结构和样式。” 2、W3C DOM 标准被分为 3 个不同的部分")]),e._v(" "),t("p",[e._v("2.1)核心 DOM - 针对任何结构化文档的标准模型\n2.2)XML DOM - 针对 XML 文档的标准模型\n2.3)HTML DOM - 针对 HTML 文档的标准模型\n备注:DOM 是 Document Object Model(文档对象模型)的缩写")]),e._v(" "),t("h2",{attrs:{id:"_2、dom-节点的-attribute-和-property-有何区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、dom-节点的-attribute-和-property-有何区别-必会"}},[e._v("#")]),e._v(" 2、dom 节点的 Attribute 和 Property 有何区别?(必会)")]),e._v(" "),t("p",[e._v("1、什么是 Property\n每 个 DOM 节点都是一个 object 对象，有自己的 property 和 method\n原则上 property 应该仅供 js 操作，不会出现在 html 中(默认属性除外:")]),e._v(" "),t("p",[e._v("id/src/href/className/dir/title/lang 等)，和其他 js object 一样，自定义的 property 也会出现在 object 的 for...in 遍历中")]),e._v(" "),t("p",[e._v("2、什么是 Attribute\nattribute 出现 在 dom 中，js 提供了 getAttribute/setAttribute 等方法来获取和改变它的值，最")]),e._v(" "),t("p",[e._v("后作用于 html 中，可以影响 innerHTML 获取的值。可以通过访问 dom 节点的 attributes 属性来获 取 改节点的所有的 attribute。(在 IE<9 中,attribute 获取和改变的实际上是 property。) 3、两者之间的区别是")]),e._v(" "),t("p",[e._v("3.1)自定义的 Property 与 Attribute 不同步,不相等\n3.2)非自定义的 DOM property 与 attributes 是有条件同步的 3.3)非自定义的属性(id/src/href/name/value 等)，通过 setAttribute 修改其特性值可以同步")]),e._v(" "),t("p",[e._v("作用到 property 上，而通过.property 修改属性值有的(value)时候不会同步到 attribute 上，即不会 反应到 html 上(除以下几种情况，非自定义属性 在二者之间是同步的)。")]),e._v(" "),t("h2",{attrs:{id:"_3、dom-结构操作怎样添加、移除、移动、复制、创建和查找节点-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、dom-结构操作怎样添加、移除、移动、复制、创建和查找节点-必会"}},[e._v("#")]),e._v(" 3、dom 结构操作怎样添加、移除、移动、复制、创建和查找节点? (必会)")]),e._v(" "),t("p",[e._v("1、创建新节点\ncreateDocumentFragment() //创建一个 DOM 片段 createElement() //创建一个具体的元素 createTextnode() //创建一个文本节点 2、添加、移除、替换、插入\nappendChild()\nremoveChild()\nreplaceChild()")]),e._v(" "),t("p",[e._v("insertBefore() //并没有 insertAfter()")]),e._v(" "),t("p",[e._v("3、查找\ngetElementsByTagName() //通过标签名称\ngetElementsByName() //通过元素的 Name 属性的值(IE 容错能力较强， 会得到一个数组，其中包括 id 等于 name 值的)\ngetElementById() //通过元素 Id，唯一性")]),e._v(" "),t("h2",{attrs:{id:"_4、dom-事件模型-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、dom-事件模型-必会"}},[e._v("#")]),e._v(" 4、dom 事件模型?(必会)")]),e._v(" "),t("p",[e._v("DOM 事件模型。\nDOM 事件模型分为两种:事件捕获和事件冒泡。 事件捕获以点击事件为例，同类型事件会由 根—>目标的祖先素—>目标的父元素—>目标")]),e._v(" "),t("p",[e._v("元素 事件冒泡和事件捕获截然相反。从内到外依次触发:目标元素—>目标元素的父元素—>父")]),e._v(" "),t("p",[e._v("元素的父元素—>根 事件传播")]),e._v(" "),t("p",[e._v("事件捕获和事件冒泡都有事件传播阶段，传播阶段就是事件从触发开始到结束的过程。 优先级:先捕获，再冒泡。\n两种传播方式的来源:W3C 推行 DOM2 级事件之前网景和 IE 在打架，网景用的事件传播方")]),e._v(" "),t("p",[e._v("式是捕获，IE 用的事件传播方式是冒泡")]),e._v(" "),t("h2",{attrs:{id:"_5、什么是事件冒泡-它是如何工作的-如何阻止事件冒泡、默认行-为-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、什么是事件冒泡-它是如何工作的-如何阻止事件冒泡、默认行-为-必会"}},[e._v("#")]),e._v(" 5、什么是事件冒泡，它是如何工作的?如何阻止事件冒泡、默认行 为?(必会)")]),e._v(" "),t("p",[e._v("1、什么是事件冒泡，他是如何工作的\n在一个对象上触发某类事件(比如单击 onclick 事件)，这个事件会向这个对象的父级对象传")]),e._v(" "),t("p",[e._v("播，从里到外，直至它被处理(父级对象所有同类事件都将被激活)，或者它到达了对象层次的 最顶层，即 document 对象(有些浏览器是 window)")]),e._v(" "),t("p",[e._v("2、阻止事件冒泡的方法\n2.1)w3c 方法是:event.stopPropagation(); 事件处理过程中，阻止冒泡事件，但不会阻止默认行为")]),e._v(" "),t("p",[e._v("(跳转至超链接)\n2.2)IE 则是使用 event.cancelBubble = true 阻止事件冒泡")]),e._v(" "),t("p",[e._v("2.3)return false; jq 里面事件处理过程中，阻止冒泡事件，也阻止默认行为(不跳转超链接) 封装方法:")]),e._v(" "),t("p",[e._v("function bubbles(e){\nvar ev = e || window.event; if(ev && ev.stopPropagation) {")]),e._v(" "),t("p",[e._v("//非 IE 浏览器")]),e._v(" "),t("p",[e._v("ev.stopPropagation(); } else {")]),e._v(" "),t("p",[e._v("//IE 浏览器(IE11 以下)")]),e._v(" "),t("p",[e._v("ev.cancelBubble = true; }")]),e._v(" "),t("p",[e._v('console.log("最底层盒子被点击了") }')]),e._v(" "),t("p",[e._v("阻止默认行为:\nw3c 的方法是 e.preventDefault()，IE 则是使用 e.returnValue = false; 封装:")]),e._v(" "),t("p",[e._v("//假定有链接"),t("a",{attrs:{href:"http://caibaojian.com/",id:"testA"}},[e._v("caibaojian.com")]),e._v(' var a = document.getElementById("testA");\na.onclick =function(e){')]),e._v(" "),t("p",[e._v("if(e.preventDefault){ e.preventDefault();")]),e._v(" "),t("p",[e._v("}else{\nwindow.event.returnValue == false;")]),e._v(" "),t("p",[e._v("} }")]),e._v(" "),t("h2",{attrs:{id:"_6、javascript-动画和-css3-动画有什么区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、javascript-动画和-css3-动画有什么区别-必会"}},[e._v("#")]),e._v(" 6、JavaScript 动画和 CSS3 动画有什么区别?(必会)")]),e._v(" "),t("p",[e._v("1、CSS 动画 优点:")]),e._v(" "),t("p",[e._v("1.1) 浏览器可以对动画进行优化。\n1.1.1 )浏览器使用 requestAnimationFrame 比起 setTimeout，setInterval 设置动画的优")]),e._v(" "),t("p",[e._v("势主要是:")]),e._v(" "),t("ol",[t("li",[e._v("\\1)  requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次")])]),e._v(" "),t("p",[e._v("重绘或回流中就完成,并且重绘或回流的时间间隔紧紧跟随浏览器的刷新")]),e._v(" "),t("p",[e._v("频率,一般来说,这个频率为每秒 60 帧。")]),e._v(" "),t("ol",[t("li",[e._v("\\2)  在隐藏或不可见的元素中     requestAnimationFrame 不会进行重绘或回流，这")])]),e._v(" "),t("p",[e._v("当然就意味着更少的的 cpu，gpu 和内存使用量。")]),e._v(" "),t("p",[e._v("1.1.2) 强制使用硬件加速 (通过 GPU 来提高动画性能)")]),e._v(" "),t("p",[e._v("1.2)代码相对简单,性能调优方向固定")]),e._v(" "),t("p",[e._v("1.3)对于帧速表现不好的低版本浏览器，CSS3 可以做到自然降级，而 JS 则需要撰写额 外代码")]),e._v(" "),t("p",[e._v("缺点:")]),e._v(" "),t("p",[e._v("1.1) 运行过程控制较弱,无法附加事件绑定回调函数。CSS 动画只能暂停,不能在动画中 寻找一个特定的时间点，不能在半路反转动画，不能变换时间尺度，不能在特定的位置添 加回调函数或是绑定回放事件,无进度报告。")]),e._v(" "),t("p",[e._v("1.2) 代码冗长。想用 CSS 实现稍微复杂一点动画,最后 CSS 代码都会变得非常笨重。 2、JS 动画")]),e._v(" "),t("p",[e._v("优点:\n2.1)JavaScript 动画控制能力很强, 可以在动画播放过程中对动画进行控制:开始、暂停、")]),e._v(" "),t("p",[e._v("回放、终止、取消都是可以做到的。\n2.2)动画效果比 css3 动画丰富,有些动画效果，比如曲线运动,冲击闪烁,视差滚动效果，只")]),e._v(" "),t("p",[e._v("有 JavaScript 动画才能完成。\n2.3)CSS3 有兼容性问题，而 JS 大多时候没有兼容性问题。")]),e._v(" "),t("p",[e._v("缺点:")]),e._v(" "),t("p",[e._v("2.1)JavaScript 在浏览器的主线程中运行，而主线程中还有其它需要运行的 JavaScript 脚本、样式计算、布局、绘制任务等,对其干扰导致线程可能出现阻塞，从而造成丢帧的情 况。")]),e._v(" "),t("p",[e._v("2.2)代码的复杂度高于 CSS 动画 3、css 动画和 js 动画的差异")]),e._v(" "),t("p",[e._v("3.1)代码复杂度，js 动画代码相对复杂一些 。")]),e._v(" "),t("p",[e._v("3.2)动画运行时，对动画的控制程度上，js 能够让动画，暂停，取消，终止，css 动画不 能添加事件。")]),e._v(" "),t("p",[e._v("3.3)动画性能看，js 动画多了一个 js 解析的过程，性能不如 css 动画好。 总结:")]),e._v(" "),t("p",[e._v("简单的状态切换，不需要中间过程控制，css 动画是优选方案。 复杂的状态的 APP。应该使用 js 动画")]),e._v(" "),t("h2",{attrs:{id:"_7、event-对象的常见应用-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、event-对象的常见应用-必会"}},[e._v("#")]),e._v(" 7、event 对象的常见应用?(必会)")]),e._v(" "),t("p",[e._v("1、event.preventDefault(); // 阻止默认行为，阻止 a 链接默认的跳转行为 2、event.stopPropagation(); // 阻止冒泡\n3、event.stopImmediatePropagation(); // 按钮绑定了 2 个响应函数，依次注册 a,b 两个事件，")]),e._v(" "),t("p",[e._v("点击按钮，a 事件中加 event.stopImmediatePropagation()就能阻止 b 事件 4、event.currentTarget // 早期的 ie 不支持，当前绑定的事件")]),e._v(" "),t("p",[e._v("5、event.target")]),e._v(" "),t("h2",{attrs:{id:"_8、通用事件绑定-编写一个通用的事件监听函数-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、通用事件绑定-编写一个通用的事件监听函数-必会"}},[e._v("#")]),e._v(" 8、通用事件绑定/ 编写一个通用的事件监听函数?(必会)")]),e._v(" "),t("p",[e._v("function bindEvent(elem, type, selector, fn) { if (fn == null) {")]),e._v(" "),t("p",[e._v("fn = selector;")]),e._v(" "),t("p",[e._v("selector = null; }")]),e._v(" "),t("p",[e._v("elem.addEventListner(type, function(e) { var target;")]),e._v(" "),t("p",[e._v("if (selector) {\ntarget = e.target;")]),e._v(" "),t("p",[e._v("if (target.matches(selector)) { fn.call(target, e);")]),e._v(" "),t("p",[e._v("} } else {")]),e._v(" "),t("p",[e._v("fn(e); }")]),e._v(" "),t("p",[e._v("}) }")]),e._v(" "),t("p",[e._v("// 使用代理\nvar div1 = document.getElementById('div1'); bindEvent(div1, 'click', 'a', function(e) {")]),e._v(" "),t("p",[e._v("console.log(this.innerHTML); });")]),e._v(" "),t("p",[e._v("// 不使用代理\nvar a = document.getElementById('a1'); bindEvent(div1, 'click', function(e) {")]),e._v(" "),t("p",[e._v("console.log(a.innerHTML); })")]),e._v(" "),t("h2",{attrs:{id:"_9、dom-和-bom-的区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、dom-和-bom-的区别-必会"}},[e._v("#")]),e._v(" 9、DOM 和 BOM 的区别(必会)")]),e._v(" "),t("p",[e._v("1、BOM\n1.1) BOM 是 Browser Object Model 的缩写，即浏览器对象模型。 1.2) BOM 没有相关标准。\n1.3) BOM 的最根本对象是 window")]),e._v(" "),t("p",[e._v("2、DOM\n2.1) DOM 是 Document Object Model 的缩写，即文档对象模型。 2.2) DOM 是 W3C 的标准。\n2.3) DOM 最根本对象是 document(实际上是 window.document)")]),e._v(" "),t("h2",{attrs:{id:"_10、事件三要素-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、事件三要素-必会"}},[e._v("#")]),e._v(" 10、事件三要素(必会)")]),e._v(" "),t("p",[e._v("1、事件源、就是你点的那个 div，触发的对象 2、事件类型、表示动作，比如点击、滑过等 3、事件处理函数(事件处理程序)、表示结果，比如点开关跳转到另一个页面")]),e._v(" "),t("h2",{attrs:{id:"_11、事件执行过程-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11、事件执行过程-必会"}},[e._v("#")]),e._v(" 11、事件执行过程(必会)")]),e._v(" "),t("p",[e._v("事件捕获过程:当我们点击 TEXT 时，首先是 window->document->body->div->text.这个过 程称为事件捕获，W3C 浏览器的标准执行流程。")]),e._v(" "),t("p",[e._v("事件冒泡过程:text->div->body->document->window.这个过程称为事件冒泡。IE 浏览器只 支持冒泡，不支持捕获。W3C 浏览器先执行捕获，后执行冒泡")]),e._v(" "),t("h2",{attrs:{id:"_12、获取元素位置-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12、获取元素位置-必会"}},[e._v("#")]),e._v(" 12、获取元素位置(必会)")]),e._v(" "),t("p",[e._v("1、通过元素的 offsetLeft 和 offsetTop\ndom 元素的 offsetLeft、offsetTop 指的是元素相对于其 offseParent 指定的坐标来说的。")]),e._v(" "),t("p",[e._v("offsetParent:是指当前元素最近的经过定位的父级元素，如果没有则一直向上直至 body。 注意当前元素为 fixed 时，其 offsetParent 的值为 null")]),e._v(" "),t("p",[e._v("拓展:\noffsetWidth/offsetHeight: width+padding+border clientLeft/clientTop:表示内容区域的左上角相对于整个元素左上角的位置(包括边框)// border")]),e._v(" "),t("p",[e._v("值\nclientWidth/clientHeight: width+padding\nscrollWidth:获取对象的滚动宽度\nscrollHeight: 获取对象的滚动高度。 scrollLeft:设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离")]),e._v(" "),t("p",[e._v("scrollTop:设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离 window.screen.availHeight/window.screen.availWidth: 浏览器去除上方工具栏和下放菜单栏可")]),e._v(" "),t("p",[e._v("![page59image75522592](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image001.jpg)")]),e._v(" "),t("p",[e._v("用宽高\nwindow.screen.height/window.screen.width: 屏幕宽高\n2、event.clientX 和 event.clientY\n事件相对于浏览器窗口的水平和垂直距离\n3、getBoundingClientRect\n方法返回一个一个矩形对象，包含四个属性:left、top、right 和 bottom。分别表示元素各边")]),e._v(" "),t("p",[e._v("与页面上边和左边的距离")]),e._v(" "),t("h2",{attrs:{id:"_13、封装运动函数-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13、封装运动函数-必会"}},[e._v("#")]),e._v(" 13、封装运动函数(必会)")]),e._v(" "),t("p",[e._v("/*\nobj 指的是 DOM 对象\n- json 指的是 CSS 样式\n例 startMove(oDiv,{width:100,height:100},function(){}) */\nfunction startMove(obj,json,fnEnd){")]),e._v(" "),t("p",[e._v("clearInterval(obj.timer);//先清除之前的定时器 obj.timer = setInterval(function(){")]),e._v(" "),t("p",[e._v("var bStop = true; // 假设所有的值都到了 for( var attr in json ){ //遍历 json 属性")]),e._v(" "),t("p",[e._v("var cur = (attr == 'opacity') ? Math.round(parseFloat(getStyle(obj,attr))*100) : parseInt(getStyle(obj,attr)); //对 opacity 特殊处理")]),e._v(" "),t("p",[e._v("var speed = (json[attr] - cur)/6;\nspeed = speed > 0 ? Math.ceil(speed) : Math.floor(speed); //speed 数字转化，防止不能到")]),e._v(" "),t("p",[e._v("达目标的 bug")]),e._v(" "),t("p",[e._v("} if(bStop){")]),e._v(" "),t("p",[e._v("clearInterval(obj.timer);")]),e._v(" "),t("p",[e._v("if(fnEnd)fnEnd(); //执行回调函数 }")]),e._v(" "),t("p",[e._v("},30); }")]),e._v(" "),t("p",[e._v("function getStyle(obj,name){\nreturn obj.currentStyle ? obj.currentStyle[name] : window.getComputedStyle(obj,null)[name];")]),e._v(" "),t("p",[e._v("兼容性处理，注意 getComputedStyle 为只读属性 }")]),e._v(" "),t("p",[e._v("function getByClass(oParent,sClass){\nvar aEle = oParent.getElementsByTagName('*'); var aResult =[];\nvar re = new RegExp('\\b' + sClass + '\\b','i'); for(var i=0; i<aEle.length;i++ ){")]),e._v(" "),t("p",[e._v("if(re.test(aEle[i].className)) aResult.push(aEle[i]); }")]),e._v(" "),t("p",[e._v("return aResult; }")]),e._v(" "),t("p",[e._v("if( cur != json[attr]) bStop = false; //如果没有达到目标值，则 bStop 设为 false; if(attr == 'opacity'){")]),e._v(" "),t("p",[e._v("obj.style.filter = 'alpha(opacity='+ (cur + speed) +')';")]),e._v(" "),t("p",[e._v("obj.style.opacity = (cur + speed)/100; }else{")]),e._v(" "),t("p",[e._v("obj.style[attr] = cur + speed + 'px'; }")]),e._v(" "),t("p",[e._v("// 浏 览 器")]),e._v(" "),t("h2",{attrs:{id:"_14、绑定事件和解除事件的区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14、绑定事件和解除事件的区别-必会"}},[e._v("#")]),e._v(" 14、绑定事件和解除事件的区别(必会)")]),e._v(" "),t("p",[e._v("1、事件绑定 定义:一个事件可以加多次，且不会覆盖 2、绑定方法")]),e._v(" "),t("p",[e._v("2.1)attachEvent ('on+事件名'，函数名) 这个只兼容 ie 6-8 2.2)addEventListener (事件名，函数名，false) 支持 ie9+ chrom firfox")]),e._v(" "),t("p",[e._v("绑定事件的封装")]),e._v(" "),t("p",[e._v("function addEvent(obj,sEv,fn){ if(obj.addEventListener){")]),e._v(" "),t("p",[e._v("obj.addEventListener(sEv,fn,false); }else{")]),e._v(" "),t("p",[e._v("obj.attachEvent('on'+sEv,fn); }")]),e._v(" "),t("p",[e._v("};")]),e._v(" "),t("p",[e._v("解除绑定事件的封装")]),e._v(" "),t("p",[e._v("function removeEvent(obj,sEv,fn){ if(obj.removeEventListener){ obj.removeEventListener(sEv,fn,false);")]),e._v(" "),t("p",[e._v("}else{ obj.detachEvent('on'+sEv,fn);")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("h2",{attrs:{id:"_15、谈谈事件委托的理解-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15、谈谈事件委托的理解-必会"}},[e._v("#")]),e._v(" 15、谈谈事件委托的理解?(必会)")]),e._v(" "),t("p",[e._v("JavaScript 事件代理则是一种简单的技巧，把事件处理器添加到一个上级元素上，这样就 避免了把事件处理器添加到多个子级元素上。这主要得益于浏览器的事件冒泡机制。\n优点:\n1、减少事件注册，节省内存。")]),e._v(" "),t("p",[e._v("2、在 table 上代理所有 td 的 click 事件。\n3、在 ul 上代理所有 li 的 click 事件。\n4、简化了 dom 节点更新时，相应事件的更新。\n5、不用在新添加的 li 上绑定 click 事件。\n6、当删除某个 li 时，不用移解绑上面的 click 事件。\n缺点:\n1、事件委托基于冒泡，对于不冒泡的事件不支持 2、层级过多，冒泡过程中，可能会被某层阻止掉。 3、理论上委托会导致浏览器频繁调用处理函数，虽然很可能不需要处理。所以建议就近委托， 比如在 table 上代理 td，而不是在 document 上代理 td。 4、把所有事件都用代理就可能会出现事件误判。比如，在 document 中代理了所有 button 的 click 事件，另外的人在引用改 js 时，可能不知道，造成单击 button 触发了两个 click 事件")]),e._v(" "),t("h2",{attrs:{id:"_16、javascript-中的定时器有哪些-他们的区别及用法是什么-必-会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16、javascript-中的定时器有哪些-他们的区别及用法是什么-必-会"}},[e._v("#")]),e._v(" 16、JavaScript 中的定时器有哪些?他们的区别及用法是什么?(必 会)")]),e._v(" "),t("p",[e._v("1、JavaScript 中的定时器有以下几种\n1)setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。")]),e._v(" "),t("p",[e._v("2)setInterval() 方法可按照指定的周期(以毫秒计)来调用函数或计算表达式。 setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由")]),e._v(" "),t("p",[e._v("setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。")]),e._v(" "),t("p",[e._v("setTimeout 也叫定时器 setInterval 也叫计时器")]),e._v(" "),t("h2",{attrs:{id:"_17、比较-attachevent-和-addeventlistener-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17、比较-attachevent-和-addeventlistener-必会"}},[e._v("#")]),e._v(" 17、比较 attachEvent 和 addEventListener?(必会)")]),e._v(" "),t("p",[e._v("attachEvent 只能在 IE 浏览器给标签绑定事件, 可以多次绑定 语法:Element.attachEvent(Etype,EventName)\n参数 Element:要为该元素动态添加一个事件 Etype:指定事件类型.比如:onclick,onkeyup,onmousemove 等 EventName:指定事件名称.也就是你写好的函数")]),e._v(" "),t("p",[e._v("addEventListenerW3C 标准, 除 IE 浏览器使用, 它给标签绑定事件 语法:Element.addEventListener(Etype,EventName,boole) Etype:事件类型.比如:click,keyup,mousemove.注意使用 addEventListener 绑定事件时，设置参数事 件类型时不必写 on.否则会出错")]),e._v(" "),t("p",[e._v("EventName:要绑定事件的名称.也就是你写好的函数\nboole:该参数是一个布尔值:默认 false.false 代表冒泡阶段执行, true 代表捕获阶段执行")]),e._v(" "),t("h2",{attrs:{id:"_18、document-write-和-innerhtml-的区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18、document-write-和-innerhtml-的区别-必会"}},[e._v("#")]),e._v(" 18、document.write 和 innerHTML 的区别?(必会)")]),e._v(" "),t("p",[e._v("document.write 是直接写入到页面的内容流，如果在写之前没有调用 document.open, 浏览 器会自动调用 open。每次写完关闭之后重新调用该函数，会导致页面被重写")]),e._v(" "),t("p",[e._v("innerHTML 则是 DOM 页面元素的一个属性，代表该元素的 html 内容。 innerHTML 将内容写入某个 DOM 节点，不会导致页面全部重绘")]),e._v(" "),t("p",[e._v("innerHTML 很多情况下都优于 document.write，其原因在于其允许更精确的控制要刷 新页面的那一个部分")]),e._v(" "),t("h2",{attrs:{id:"_19、什么是-window-对象-什么是-document-对象-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19、什么是-window-对象-什么是-document-对象-必会"}},[e._v("#")]),e._v(" 19、什么是 window 对象?什么是 document 对象?(必会)")]),e._v(" "),t("p",[e._v("1、什么是 window 对象\n简单来说，document 是 window 的一个对象属性。\nWindow 对象表示浏览器中打开的窗口。\n如果文档包含框架(frame 或 iframe 标签)，浏览器会为 HTML 文档创建一个")]),e._v(" "),t("p",[e._v("window 对象，并为每个框架创建一个额外的 window 对象。 所有的全局函数和对象都属于 Window 对象的属性和方法。 它是一个顶层对象,而不是另一个对象的属性，即浏览器的窗口。 属性")]),e._v(" "),t("p",[e._v("defaultStatus 缺省的状态条消息\ndocument 当前显示的文档(该属性本身也是一个对象)\nframe 窗口里的一个框架((FRAME>)(该属性本身也是一个对象)\nframes array 列举窗口的框架对象的数组,按照这些对象在文档中出现的顺序列出(该")]),e._v(" "),t("p",[e._v("属性本身也是一个对象)\nhistory 窗口的历史列表(该属性本身也是一个对象)")]),e._v(" "),t("p",[e._v("length 窗口内的框架数")]),e._v(" "),t("p",[e._v("location 窗口所显示文档的完整(绝对)URL(该属性本身也是一个对象)不要把它与如 document.location 混淆,后者是当前显示文档的 URL。用户可以改变 window.location(用另一个文档 取代当前文档),但却不能改变 document.location (因为这是当前显示文档的位置)")]),e._v(" "),t("p",[e._v("name 窗口打开时,赋予该窗口的名字")]),e._v(" "),t("p",[e._v("opener 代表使用 window.open 打开当前窗口的脚本所在的窗口(这是 Netscape Navigator 3.0beta 3 所引入的一个新属性)")]),e._v(" "),t("p",[e._v("parent 包含当前框架的窗口的同义词。frame 和 window 对象的一个属性 self 当前窗口或框架的同义词\nstatus 状态条中的消息\ntop 包含当前框架的最顶层浏览器窗口的同义词")]),e._v(" "),t("p",[e._v("window 当前窗口或框架的同义词,与 self 相同 方法\nalert() 打开一个 Alert 消息框\nclearTimeout() 用来终止 setTimeout 方法的工作 close() 关闭窗口")]),e._v(" "),t("p",[e._v("confirm() 打开一个 Confirm 消息框,用户可以选择 OK 或 Cancel,如果用户单击 OK,该 方法返回 true,单击 Cancel 返回 false")]),e._v(" "),t("p",[e._v("blur() 把焦点从指定窗口移开(这是 Netscape Navigator 3.0 beta 3 引入的新方法) focus() 把指定的窗口带到前台(另一个新方法)")]),e._v(" "),t("p",[e._v("脚本 序")]),e._v(" "),t("p",[e._v("open() 打开一个新窗口\nprompt() 打开一个 Prompt 对话框,用户可向该框键入文本,并把键入的文本返回到")]),e._v(" "),t("p",[e._v("setTimeout() 等待一段指定的毫秒数时间,然后运行指令事件处理程序事件处理程")]),e._v(" "),t("p",[e._v("onload() 页面载入时触发 onunload() 页面关闭时触发")]),e._v(" "),t("p",[e._v("2、什么是 document 对象 [document 对象]")]),e._v(" "),t("p",[e._v("该对象是 window 和 frames 对象的一个属性,是显示于窗口或框架内的一个文档。 属性\nalinkColor 活动链接的颜色(ALINK)\nanchor 一个 HTMI 锚点,使用<A NAME=>标记创建(该属性本身也是一个对象) anchors array 列出文档锚点对象的数组(<A NAME=>)(该属性本身也是一个对象) bgColor 文档的背景颜色(BGCOLOR)")]),e._v(" "),t("p",[e._v("cookie 存储于 cookie.txt 文件内的一段信息,它是该文档对象的一个属性\nfgColor 文档的文本颜色("),t("BODY",[e._v("标记里的 TEXT 特性)\nform 文档中的一个窗体("),t("FORM",[e._v(")(该属性本身也是一个对象)\nforms anay 按照其出现在文档中的顺序列出窗体对象的一个数组(该属性本身也是一个")])],1)],1),e._v(" "),t("p",[e._v("对象)\nlastModified 文档最后的修改日期\nlinkColor 文档的链接的颜色,即"),t("BODY",[e._v("标记中的 LINK 特性(链接到用户没有观察到的")])],1),e._v(" "),t("p",[e._v("文档)\nlink 文档中的一个<A HREF=>标记(该属性本身也是一个对象)\nlinks array 文档中 link 对象的一个数组,按照它们出现在文档中的顺序排列(该属性本身")]),e._v(" "),t("p",[e._v("也是一个对象)\nlocation 当前显示文档的 URL。用户不能改变 document.location(因为这是当前显示文档")]),e._v(" "),t("p",[e._v("的位置)。但是,可以改变 window.location (用其它文档取代当前文档)window.location 本身也是 一个对象,而 document.location 不是对象")]),e._v(" "),t("p",[e._v("referrer 包含链接的文档的 URL,用户单击该链接可到达当前文档\ntitle 文档的标题((TITLE>)\nvlinkColor 指向用户已观察过的文档的链接文本颜色,即"),t("BODY",[e._v("标记的 VLINK 特性 方法")])],1),e._v(" "),t("p",[e._v("clear 清除指定文档的内容\nclose 关闭文档流\nopen 打开文档流\nwrite 把文本写入文档\nwriteln 把文本写入文档,并以换行符结尾")]),e._v(" "),t("p",[e._v("区别:\n1、window 指窗体。document 指页面。document 是 window 的一个子对象。\n2、用户不能改变 document.location(因为这是当前显示文档的位置)。但是,可以改变")]),e._v(" "),t("p",[e._v("window.location (用其它文档取代当前文档)window.location 本身也是一个对象,而 document.location 不是对象")]),e._v(" "),t("h2",{attrs:{id:"_20、js-拖动的原理-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20、js-拖动的原理-必会"}},[e._v("#")]),e._v(" 20、Js 拖动的原理?(必会)")]),e._v(" "),t("p",[e._v("js 的拖拽效果主要用到以下三个事件: mousedown 鼠标按下事件\nmousemove 鼠标移动事件\nmouseup 鼠标抬起事件")]),e._v(" "),t("p",[e._v("当点击 dom 的时候，记录当前鼠标的坐标值，也就是 x、y 值，以及被拖拽的 dom 的 top、 left 值，而且还要在鼠标按下的回调函数里添加鼠标移动的事件:")]),e._v(" "),t("p",[e._v('document.addEventListener("mousemove", moving, false) 和添加鼠标抬起的事件 document.addEventListener("mouseup",function() {')]),e._v(" "),t("p",[e._v('document.removeEventListener("mousemove", moving, false);}, false); 这个抬起的事件是为了解除鼠标移动的监听，因为只有在鼠标按下才可以拖拽，抬起')]),e._v(" "),t("p",[e._v("就停止不会移动了。\n当鼠标按下鼠标移动的时候，记录移动中的 x、y 值，那么这个被拖拽的 dom 的 top 和")]),e._v(" "),t("p",[e._v("left 值就是:\ntop=鼠标按下时记录的 dom 的 top 值+(移动中的 y 值 - 鼠标按下时的 y 值) left=鼠标按下时记录的 dom 的 left 值+(移动中的 x 值 - 鼠标按下时的 x 值);")]),e._v(" "),t("h2",{attrs:{id:"_21、描述浏览器的渲染过程-dom-树和渲染树的区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21、描述浏览器的渲染过程-dom-树和渲染树的区别-必会"}},[e._v("#")]),e._v(" 21、描述浏览器的渲染过程，DOM 树和渲染树的区别(必会)")]),e._v(" "),t("p",[e._v("1、浏览器的渲染过程:\n解析 HTML 构建 DOM(DOM 树)，并行请求 css/image/js CSS 文件下载完成，开始构建 CSSOM(CSS 树)")]),e._v(" "),t("p",[e._v("![page64image76009952](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image002.jpg)")]),e._v(" "),t("p",[e._v("CSSOM 构建结束后，和 DOM 一起生成 Render Tree(渲染树) 布局(Layout):计算出每个节点在屏幕中的位置 显示(Painting):通过显卡把页面画到屏幕上")]),e._v(" "),t("p",[e._v("2、DOM 树 和 渲染树 的区别\nDOM 树与 HTML 标签一一对应，包括 head 和隐藏元素\n渲染树不包括 head 和隐藏元素，大段文本的每一个行都是独立节点，每一个节点都有")]),e._v(" "),t("p",[e._v("对应的 css 属性")]),e._v(" "),t("h2",{attrs:{id:"_22、如何最小化重绘-repaint-和回流-reflow-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22、如何最小化重绘-repaint-和回流-reflow-必会"}},[e._v("#")]),e._v(" 22、如何最小化重绘(repaint)和回流(reflow)(必会)")]),e._v(" "),t("p",[e._v("什么是重绘 Repaint 和重排 (回流 reflow) 重绘:当元素的一部分属性发生改变，如外观、背景、颜色等不会引起布局变化，只需要浏览器 根据元素的新属性重新绘制，使元素呈现新的外观叫做重绘。")]),e._v(" "),t("p",[e._v("重排(回流):当 render 树中的一部分或者全部因为大小边距等问题发生改变而需要 DOM 树重新 计算的过程")]),e._v(" "),t("p",[e._v("重绘不一定需要重排(比如颜色的改变)，重排必然导致重绘(比如改变网页位置)")]),e._v(" "),t("p",[e._v("方法:")]),e._v(" "),t("p",[e._v('1、需要要对元素进行复杂的操作时，可以先隐藏(display:"none")，操作完成后再显示 2、需要创建多个 DOM 节点时，使用 DocumentFragment 创建完后一次性的加入 document 缓存 Layout 属性值，如:var left = elem.offsetLeft; 这样，多次使用 left 只产生一次回流 3、尽量避免用 table 布局(table 元素一旦触发回流就会导致 table 里所有的其它元素回流) 4、避免使用 css 表达式(expression)，因为每次调用都会重新计算值(包括加载页面) 5、尽量使用 css 属性简写，如:用 border 代替 border-width, border-style, border-color 6、批量修改元素样式:elem.className 和 elem.style.cssText 代替 elem.style.xxx')]),e._v(" "),t("h2",{attrs:{id:"_23、js-延迟加载的方式有哪些-了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23、js-延迟加载的方式有哪些-了解"}},[e._v("#")]),e._v(" 23、Js 延迟加载的方式有哪些?(了解)")]),e._v(" "),t("p",[e._v("js 的延迟加载有助与提高页面的加载速度\nJS 延迟加载，也就是等页面加载完成之后再加载 JavaScript 文件 一般有以下几种方式:使用 setTimeout 延迟方法\n让 JS 最后加载\n1、defer 属性 用途:表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面")]),e._v(" "),t("p",[e._v("都解析完毕之后再执行\n在"),t("script")])])}),[],!1,null,null,null);t.default=a.exports}}]);