(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{298:function(e,t,a){"use strict";a.r(t);var r=a(13),v=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"javascript-高级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-高级"}},[e._v("#")]),e._v(" JavaScript 高级")]),e._v(" "),t("h2",{attrs:{id:"_1、typeof-和-instanceof-区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、typeof-和-instanceof-区别-必会"}},[e._v("#")]),e._v(" 1、typeof 和 instanceof 区别(必会)")]),e._v(" "),t("p",[e._v("在 javascript 中，判断一个变量的类型可以用 typeof\n1、数字类型、typeof 返回的值是 number。比如说:typeof(1)，返回值是 number 2、字符串类型，typeof 返回的值是 string。比如 typeof(“123”返回值时 string) 3、布尔类型，typeof 返回的值是 boolean。比如 typeof(true)返回值时 boolean")]),e._v(" "),t("p",[e._v("4、对象、数组、null 返回的值是 object。比如 typeof(window)，typeof(document)，typeof(null)返回 的值都是 object\n5、函数类型，返回的值是 function。比如:typeof(eval)，typeof(Date)返回的值都是 function。 6、不存在的变量、函数或者 undefined，将返回 undefined。比如:typeof(abc)、typeof(undefined) 都返回 undefined")]),e._v(" "),t("p",[e._v("使用 typeof 运算符无论引用的是什么类型的对象，它都返回”object” 运算符 instanceof 来解决这个问题。用于判断某个对象是否被另一个函数构造")]),e._v(" "),t("h2",{attrs:{id:"_2、js-使用-typeof-能得到的哪些类型-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、js-使用-typeof-能得到的哪些类型-必会"}},[e._v("#")]),e._v(" 2、js 使用 typeof 能得到的哪些类型?(必会)")]),e._v(" "),t("p",[e._v("typeof 只能区分值类型 typeof undefined // undefined typeof null // object\ntypeof console.log // function typeof NaN // number")]),e._v(" "),t("h2",{attrs:{id:"_3、解释一下什么是回调函数-并提供一个简单的例子-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、解释一下什么是回调函数-并提供一个简单的例子-必会"}},[e._v("#")]),e._v(" 3、解释一下什么是回调函数，并提供一个简单的例子?(必会)")]),e._v(" "),t("p",[e._v("回调函数就是一个通过调用的函数。如果你把函数的(地址)作为给另一个函数，当这个 指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直 接调用，而是在特定的事件或条件发生时由另外的一方调用的")]),e._v(" "),t("p",[e._v("案例: #include<stdio.h>")]),e._v(" "),t("p",[e._v("//callbackTest.c\n//1.定义函数 onHeight(回调函数) //@onHeight 函数名\n//@height 参数\n//@contex 上下文\nvoid onHeight(double height, void *contex) {")]),e._v(" "),t("p",[e._v('printf("current height is %lf", height); }')]),e._v(" "),t("p",[e._v("//2.定义 onHeight 函数的原型\n//@CallbackFun 指向函数的指针类型\n//@height 回调参数，当有多个参数时，可以定义一个结构体\n//@contex 回调上下文，在 C 中一般传入 nullptr，在 C++中可传入对象指针 typedef void (*CallbackFun)(double height, void *contex);\n//定义全局指针变量\nCallbackFun m_pCallback;\n//定义注册回调函数")]),e._v(" "),t("p",[e._v("void registHeightCallback(CallbackFun callback, void *contex) {")]),e._v(" "),t("p",[e._v("m_pCallback = callback; }")]),e._v(" "),t("p",[e._v("//定义调用函数\nvoid printHeightFun(double height) {")]),e._v(" "),t("p",[e._v("m_pCallback(height, NULL); }")]),e._v(" "),t("p",[e._v("//main 函数 int main()\n{")]),e._v(" "),t("p",[e._v("//注册回调函数 onHeight registHeightCallback(onHeight, NULL); //打印 height\ndouble h = 99;\nprintHeightFun(99);")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("h2",{attrs:{id:"_4、什么是闭包-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、什么是闭包-必会"}},[e._v("#")]),e._v(" 4、什么是闭包?(必会)")]),e._v(" "),t("p",[e._v("定义:")]),e._v(" "),t("p",[e._v("一个作用域可以访问另外一个函数内部的局部变量 ,或者说一个函数(子函数)访问另一 个函数(父函数)中的变量。 此时就会有闭包产生 ,那么这个变量所在的函数我们就称之为闭 包函数。")]),e._v(" "),t("p",[e._v("function aaa() { var a = 0;")]),e._v(" "),t("p",[e._v("return function () { alert(a++);")]),e._v(" "),t("p",[e._v("}; }")]),e._v(" "),t("p",[e._v("var fun = aaa(); fun(); //1")]),e._v(" "),t("p",[e._v("优缺点:")]),e._v(" "),t("p",[e._v("闭包的主要作用: 延伸了变量的作用范围, 因为闭包函数中的局部变量不会等着闭包函数 执行完就销毁, 因为还有别的函数要调用它 , 只有等着所有的函数都调用完了他才会销毁 闭包会造成内存泄漏，如何解决:用完之后手动释放")]),e._v(" "),t("p",[e._v("详解:\n闭包不仅仅可以实现函数内部的作用域访问这个函数中的局部变量, 还可以实现全局作用域或者是别的地方的作用域也可以访问到函数内部的局部变量 , 实现方法就是 return 了一个函数\n所以 return 函数也是我们实现闭包的一个主要原理, 因为返回的这个函数本身就是我们 fn")]),e._v(" "),t("p",[e._v("函数内部的一个子函数 ,所以子函数是可以访问父函数里面的局部变量的, 所以返回完毕 之后 ,外面的函数一调用, 就会回头调用返回的这个函数, 所以就可以拿到这个子函数对 应的父函数里面的局部变量.")]),e._v(" "),t("p",[e._v("注意:")]),e._v(" "),t("p",[e._v("1、由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包， 否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前， 将不使用的局部变量全部删除。")]),e._v(" "),t("p",[e._v("2、闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象 (object)使用，把闭包当作它的公用方法(Public Method)，把内部变量当作它的私 有")]),e._v(" "),t("p",[e._v("属性(private value)，这时一定要小心，不要随便改变父函数内部变量的值。")]),e._v(" "),t("h2",{attrs:{id:"_5、什么是内存泄漏-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、什么是内存泄漏-必会"}},[e._v("#")]),e._v(" 5、什么是内存泄漏(必会)")]),e._v(" "),t("p",[e._v('内存泄露是指:内存泄漏也称作"存储渗漏"，用动态存储分配函数动态开辟的空间，在使 用完毕后未释放，结果导致一直占据该内存单元。直到程序结束。(其实说白了就是该内存空间 使用完毕之后未回收)即所谓内存泄漏。')]),e._v(" "),t("h2",{attrs:{id:"_6、哪些操作会造成内存泄漏-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、哪些操作会造成内存泄漏-必会"}},[e._v("#")]),e._v(" 6、哪些操作会造成内存泄漏?(必会)")]),e._v(" "),t("p",[e._v("1、垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的 引用数量为 0(没有其他对象引用过该对象)，或对该对象的唯一引用是循环的，那么该对象的 内存即可回收")]),e._v(" "),t("p",[e._v("2、setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏 3、闭包、控制台日志、循环(在两个对象彼此引用且彼此保留时，就会产生一个循环)")]),e._v(" "),t("h2",{attrs:{id:"_7、js-内存泄漏的解决方式-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、js-内存泄漏的解决方式-必会"}},[e._v("#")]),e._v(" 7、JS 内存泄漏的解决方式(必会)")]),e._v(" "),t("p",[e._v("1、global variables:对未声明的变量的引用在全局对象内创建一个新变量。在浏览器中，全 局对象就是 window。")]),e._v(" "),t("p",[e._v("function foo(arg) {\nbar = 'some text'; // 等同于 window.bar = 'some text';")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("p",[e._v("1.1)解决: 1.1.1)创建意外的全局变量")]),e._v(" "),t("p",[e._v("function foo() {\nthis.var1 = 'potential accident'")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("p",[e._v("1.1.2)可以在 JavaScript 文件开头添加 “use strict”，使用严格模式。这样在严格模式 下解析 JavaScript 可以防止意外的全局变量")]),e._v(" "),t("p",[e._v("1.1.3)在使用完之后，对其赋值为 null 或者重新分配\n1.2)被忘记的 Timers 或者 callbacks\n在 JavaScript 中使用 setInterval 非常常见 大多数库都会提供观察者或者其它工具来处理回调函数，在他们自己的实例变为不可达时，")]),e._v(" "),t("p",[e._v("会让回调函数也变为不可达的。对于 setInterval，下面这样的代码是非常常见的:")]),e._v(" "),t("p",[e._v("var serverData = loadData();\nsetInterval(function() {\nvar renderer = document.getElementById('renderer'); if(renderer) {\nrenderer.innerHTML = JSON.stringify(serverData);\n}\n}, 5000); //This will be executed every ~5 seconds.")]),e._v(" "),t("p",[e._v("这个例子阐述着 timers 可能发生的情况:计时器会引用不再需要的节点或数据 1.3)闭包:一个可以访问外部(封闭)函数变量的内部函数\nJavaScript 开发的一个关键方面就是闭包:一个可以访问外部(封闭)函数变量的内部函数。")]),e._v(" "),t("p",[e._v("由于 JavaScript 运行时的实现细节，可以通过以下方式泄漏内存:")]),e._v(" "),t("p",[e._v("var theThing = null;\nvar replaceThing = function () {")]),e._v(" "),t("p",[e._v("var originalThing = theThing; var unused = function () {")]),e._v(" "),t("p",[e._v("if (originalThing) // a reference to 'originalThing' console.log(\"hi\");")]),e._v(" "),t("p",[e._v("};\ntheThing = {")]),e._v(" "),t("p",[e._v("longStr: new Array(1000000).join('*'), someMethod: function () {")]),e._v(" "),t("p",[e._v('console.log("message"); }')]),e._v(" "),t("p",[e._v("}; };")]),e._v(" "),t("p",[e._v("setInterval(replaceThing, 1000);")]),e._v(" "),t("p",[e._v("1.4)DOM 引用")]),e._v(" "),t("p",[e._v("有时候，在数据结构中存储 DOM 结构是有用的。假设要快速更新表中的几行内容。将每行 DOM 的引用 存储在字典或数组中可能是有意义的。当这种情况发生时，就会保留同一 DOM 元素的两份引用:一个在 DOM 树种，另一个在字典中。如果将来某个时候你决定要删除这些行，则需要让两个引用都不可达。")]),e._v(" "),t("p",[e._v("var elements = {\nbutton: document.getElementById('button'), image: document.getElementById('image')")]),e._v(" "),t("p",[e._v("};\nfunction doStuff() {")]),e._v(" "),t("p",[e._v("elements.image.src = 'http://example.com/image_name.png'; }")]),e._v(" "),t("p",[e._v("function removeImage() {\n// The image is a direct child of the body element. document.body.removeChild(document.getElementById('image')); // At this point, we still have a reference to #button in the\n//global elements object. In other words, the button element is //still in memory and cannot be collected by the GC.")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("h2",{attrs:{id:"_8、说说你对原型-prototype-理解-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、说说你对原型-prototype-理解-必会"}},[e._v("#")]),e._v(" 8、说说你对原型(prototype)理解(必会)")]),e._v(" "),t("p",[e._v("JavaScript 中所有都是对象，在 JavaScript 中，原型也是一个对象，通过原型可以实现对象 的属性继承，JavaScript 的函数对象中都包含了一个” prototype”内部属性，这个属性所对 应的就是该函数对象的原型")]),e._v(" "),t("p",[e._v("“prototype”作为函数对象的内部属性，是不能被直接访问的。所以为了方便查看一个对 象的原型，Firefox 和 Chrome 内核的 JavaScript 引擎中提供了”proto“这个非标准的访问器")]),e._v(" "),t("p",[e._v("原型的主要作用就是为了实现继承与扩展对象")]),e._v(" "),t("h2",{attrs:{id:"_9、介绍下原型链-解决的是继承问题吗-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、介绍下原型链-解决的是继承问题吗-必会"}},[e._v("#")]),e._v(" 9、介绍下原型链(解决的是继承问题吗)(必会)")]),e._v(" "),t("p",[e._v("JavaScript 原型: 每个对象都会在其内部初始化一个属性，就是 prototype(原型)")]),e._v(" "),t("p",[e._v("原型链: 当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会去")]),e._v(" "),t("p",[e._v("它的__proto__隐式原型上查找，即它的构造函数的 prototype，如果还没有找到就会再在构 造函数的 prototype 的__proto__中查找，这样一层一层向上查找就会形成一个链式结构，我 们称为原型链。")]),e._v(" "),t("p",[e._v("![page72image75873936](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image001.jpg)")]),e._v(" "),t("p",[e._v("特点:\nJavaScript 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型 副本。当我们修改原型时，与之相关的对象也会继承这一改变")]),e._v(" "),t("h2",{attrs:{id:"_10、常见的-js-中的继承方法有哪些-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、常见的-js-中的继承方法有哪些-必会"}},[e._v("#")]),e._v(" 10、常见的 js 中的继承方法有哪些(必会)")]),e._v(" "),t("p",[e._v("ES5 继承有以下六种方法:\n1、原型链继承 JavaScript 实现继承的基本思想:通过原型将一个引用类型继承另一个引用类型 的属性和方法\n2、借用构造函数继承(伪造对象或经典继承) JavaScript 实现继承的基本思想:在子类构造 函 数内部调用超类型构造函数。 通过使用 apply()和 call()方法可以在新创建的子类对象上执行构造 函数\n3、组合继承(原型+借用构造)(伪经典继承) JavaScript 实现继承的基本思想:将原型链和 借用 构造函数的技术组合在一块，从而发挥两者之长的一种继承模式，将原型链和借用构造函数的技 术组合到一起，从而取长补短发挥两者长处的一种继承模式\n4、型式继承 JavaScript 实现继承的基本思想:借助原型可以基于已有的对象创建新对象， 同 时还不必须因此创建自定义的类型\n5、寄生式继承 JavaScript 实现继承的基本思想:创建一个仅用于封装继承过程的函数，该函数 在内部以某种方式来增强对象，最后再像真正是它做了所有工作一样返回对象。 寄生式继承是原型式继承的加强版")]),e._v(" "),t("p",[e._v("6、寄生组合式继承 JavaScript 实现继承的基本思想:通过借用函数来继承属性，通过原型链 的混成形式来继承方法")]),e._v(" "),t("p",[e._v("ES6 的继承:\n1、使用 class 构造一个父类")]),e._v(" "),t("p",[e._v("class Parent {")]),e._v(" "),t("p",[e._v("= name this.age = age")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("p",[e._v("} }")]),e._v(" "),t("p",[e._v("2、使用 class 构造一个子类，并使用 extends 实现继承，super 指向父类的原型对象")]),e._v(" "),t("p",[e._v("![page72image75875344](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image002.png)")]),e._v(" "),t("p",[e._v("constructor(name,age){")]),e._v(" "),t("p",[e._v("![page72image75841168](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image003.png)")]),e._v(" "),t("p",[e._v("this.name")]),e._v(" "),t("p",[e._v("![page72image75840960](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image004.png)")]),e._v(" "),t("p",[e._v("sayName(){")]),e._v(" "),t("p",[e._v("![page72image75840752](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image005.png)")]),e._v(" "),t("p",[e._v("console.log(this.name);")]),e._v(" "),t("p",[e._v("class Child extends Parent{")]),e._v(" "),t("p",[e._v("= gender }")]),e._v(" "),t("p",[e._v("} }")]),e._v(" "),t("p",[e._v("3、实例化对象")]),e._v(" "),t("p",[e._v("const ming = new 男')")]),e._v(" "),t("h2",{attrs:{id:"_11、介绍-this-各种情况-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11、介绍-this-各种情况-必会"}},[e._v("#")]),e._v(" 11、介绍 this 各种情况(必会)")]),e._v(" "),t("p",[e._v("this 的情况:\n1、以函数形式调用时，this 永远都是 window 2、以方法的形式调用时，this 是调用方法的对象 3、以构造函数的形式调用时，this 是新创建的那个对象 4、使用 call 和 apply 调用时，this 是指定的那个对象")]),e._v(" "),t("p",[e._v("5、箭头函数:箭头函数的 this 看外层是否有函数 如果有，外层函数的 this 就是内部箭头函数的 this 如果没有，就是 window")]),e._v(" "),t("p",[e._v("6、特殊情况:通常意义上 this 指针指向为最后调用它的对象。这里需要注意的一点就是 如果返回值是一个对象，那么 this 指向的就是那个返回的对象，如果返回值不是一个对象那么 this 还是指向函数的实例")]),e._v(" "),t("h2",{attrs:{id:"_12、数组中的-foreach-和-map-的区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12、数组中的-foreach-和-map-的区别-必会"}},[e._v("#")]),e._v(" 12、数组中的 forEach 和 map 的区别?(必会)")]),e._v(" "),t("p",[e._v("forEach 和 map 的相同点")]),e._v(" "),t("p",[e._v("相同点 都是循环遍历数组中的每一项\nforEach 和 map 方法里每次执行匿名函数都支持 3 个参数，参数分别是 item(当前每一项)，")]),e._v(" "),t("p",[e._v("index(索引值)，arr(原数组)")]),e._v(" "),t("p",[e._v("匿名函数中的 this 都是指向 window 只能遍历数组 都不会改变原数组 区别 map 方法\n1.map 方法返回一个新的数组，数组中的元素为原始数组调用函数处理后的值\n2.map 方法不会对空数组进行检测，map 方法不会改变原始数组。 3.浏览器支持:chrome、Safari1.5+、opera 都支持，IE9+, 若 arr 为空数组，则 map 方法返回的也 是一个空数组。")]),e._v(" "),t("p",[e._v("forEach 方法\n1.forEach 方法用来调用数组的每个元素，将元素传给回调函数")]),e._v(" "),t("p",[e._v("2.forEach 对于空数组是不会调用回调函数的。 无论 arr 是不是空数组，forEach 返回的都是 undefined。这个方法只是将数组中的每一项作为 callback 的参数执行一次")]),e._v(" "),t("p",[e._v("![page73image76166352](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image006.png)")]),e._v(" "),t("p",[e._v("constructor(name,age,gender){")]),e._v(" "),t("p",[e._v("![page73image76166560](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image007.png)")]),e._v(" "),t("p",[e._v("super(name,age)")]),e._v(" "),t("p",[e._v("![page73image76166976](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image008.png)")]),e._v(" "),t("p",[e._v("this.gender")]),e._v(" "),t("p",[e._v("![page73image76166768](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image009.png)")]),e._v(" "),t("p",[e._v("sayGender(){")]),e._v(" "),t("p",[e._v("![page73image76167184](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image010.png)")]),e._v(" "),t("p",[e._v("console.log(this.gender);")]),e._v(" "),t("p",[e._v("![page73image76167808](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image011.png)")]),e._v(" "),t("p",[e._v("Child('ming',18,'")]),e._v(" "),t("p",[e._v("![page73image76168016](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image012.png)")]),e._v(" "),t("p",[e._v("ming.sayGender()")]),e._v(" "),t("p",[e._v("![page73image76168224](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image013.png)")]),e._v(" "),t("p",[e._v("ming.sayName()")]),e._v(" "),t("p",[e._v("![page73image76168432](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image014.png)")]),e._v(" "),t("p",[e._v("console.log(ming.name);")]),e._v(" "),t("p",[e._v("![page73image76168640](file:////Users/suxingxing/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image015.png)")]),e._v(" "),t("p",[e._v("console.log(ming.age);")]),e._v(" "),t("h2",{attrs:{id:"_13、for-in-和-for-of-的区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13、for-in-和-for-of-的区别-必会"}},[e._v("#")]),e._v(" 13、for in 和 for of 的区别(必会)")]),e._v(" "),t("p",[e._v("1、推荐在循环对象属性的时候使用 for...in，在遍历数组的时候的时候使用 for...of 2、for...in 循环出的是 key，for...of 循环出的是 value\n3、注意，for...of 是 ES6 新引入的特性。修复了 ES5 引入的 for...in 的不足 4、for...of 不能循环普通的对象，需要通过和 Object.keys()搭配使用")]),e._v(" "),t("h2",{attrs:{id:"_14、call-和-apply-bind-的区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14、call-和-apply-bind-的区别-必会"}},[e._v("#")]),e._v(" 14、call 和 apply，bind 的区别(必会)")]),e._v(" "),t("p",[e._v("共同点:\n1、都是用来改变函数的 this 对象的指向的。 2、第一个参数都是 this 要指向的对象。")]),e._v(" "),t("p",[e._v("3、 都可以利用后续参数传参。")]),e._v(" "),t("p",[e._v("call 方法调用一个函数, 其具有一个指定的 this 值和分别地提供的参数(参数的列表)。")]),e._v(" "),t("p",[e._v("注意:\n该方法的作用和 apply() 方法类似，只有一个区别，就是 call()方法接受的是若干个参数的列")]),e._v(" "),t("p",[e._v("表，而 apply()方法接受的是一个包含多个参数的数组\n方法调用一个具有给定 this 值的函数，以及作为一个数组(或类似数组对象)提供的参数。")]),e._v(" "),t("p",[e._v("注意:\ncall()方法的作用和 apply() 方法类似，区别就是 call()方法接受的是参数列表，而 apply()方法接")]),e._v(" "),t("p",[e._v("受的是一个参数数组\nbind()方法创建一个新的函数，当这个新的函数被调用时，其 this 值为提供的值，其参数列表")]),e._v(" "),t("p",[e._v("前几项，置为创建时指定的参数序列")]),e._v(" "),t("h2",{attrs:{id:"_15、eventloop-事件循环机制-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15、eventloop-事件循环机制-必会"}},[e._v("#")]),e._v(" 15、EventLoop 事件循环机制(必会)")]),e._v(" "),t("p",[e._v("什么是 Event Loop")]),e._v(" "),t("p",[e._v("JavaScript 的事件分两种，宏任务(macro-task)和微任务(micro-task)\n宏任务:包括整体代码 script，setTimeout，setInterval\n微任务:Promise.then(非 new Promise)，process.nextTick(node 中) 事件的执行顺序——先执行宏任务，然后执行微任务，任务有同步的任务和异步的任务，")]),e._v(" "),t("p",[e._v("同步的进入主线程，异步的进入 Event Table 并注册函数，异步事件完成后，会将回调函数放在 队列中，如果还有异步的宏任务，那么就会进行循环执行上述的操作。\nsetTimeout(() => {")]),e._v(" "),t("p",[e._v("console.log('延时 1 秒'); },1000)")]),e._v(" "),t("p",[e._v('console.log("开始")')]),e._v(" "),t("p",[e._v("//开始 //延时 1 秒")]),e._v(" "),t("p",[e._v("上述代码，setTimeout 函数是宏任务，且是异步任务，因此会将函数放入 Event Table 并注册 函数，经过指定时间后，把要执行的任务加入到 Event Queue 中，等待同步任务 console.log(“开 始”)执行结束后，读取 Event Queue 中 setTimeout 的回调函数执行。")]),e._v(" "),t("p",[e._v("上述代码不包含微任务，接下来看包含微任务的代码: setTimeout(function() {")]),e._v(" "),t("p",[e._v("console.log('setTimeout');")]),e._v(" "),t("p",[e._v("},1000)")]),e._v(" "),t("p",[e._v("new Promise(function(resolve) { console.log('promise');")]),e._v(" "),t("p",[e._v("}).then(function() { console.log('then');")]),e._v(" "),t("p",[e._v("})")]),e._v(" "),t("p",[e._v("console.log('console');\n1、首先 setTimeout，放入 Event Table 中，1 秒后将回调函数放入宏任务的 Event Queue 中 2、new Promise 同步代码，立即执行 console.log(‘promise’),然后看到微任务 then，因此将其放 入微任务的 Event Queue 中\n3、接下来执行同步代码 console.log(‘console’) 4、主线程的宏任务，已经执行完毕，接下来要执行微任务，因此会执行 Promise.then，到此，第 一轮事件循环执行完毕\n5、第二轮事件循环开始，先执行宏任务，即 setTimeout 的回调函数，然后查找是否有微任务， 没有，事件循环结束\n总结:")]),e._v(" "),t("p",[e._v("事件循环先执行宏任务，其中同步任务立即执行，异步任务加载到对应的 Event Queue 中， 微任务也加载到对应的微任务的 Event Queue 中，所有的同步微任务执行完之后，如果发现微任 务的 Event Queue 中有未执行完的任务，先执行他们这样算是完成了一轮事件循环。接下来查看 宏任务的队列中是否有异步代码，有的话执行第二轮的事件循环，以此类推。")]),e._v(" "),t("p",[e._v("再来看一个复杂点的例子: console.log('1');")]),e._v(" "),t("p",[e._v("setTimeout(function() { console.log('2');")]),e._v(" "),t("p",[e._v("process.nextTick(function() { console.log('3');")]),e._v(" "),t("p",[e._v("})\nnew Promise(function(resolve) {")]),e._v(" "),t("p",[e._v("console.log('4');")]),e._v(" "),t("p",[e._v("resolve(); }).then(function() {")]),e._v(" "),t("p",[e._v("console.log('5') })")]),e._v(" "),t("p",[e._v("})")]),e._v(" "),t("p",[e._v("//1、2、4、3、5\n1、宏任务同步代码 console.log(‘1’)\n2、setTimeout，加入宏任务 Event Queue，没有发现微任务，第一轮事件循环走完")]),e._v(" "),t("p",[e._v("3、第二轮事件循环开始，先执行宏任务，从宏任务 Event Queue 中独取出 setTimeout 的回调 函数")]),e._v(" "),t("p",[e._v("4、同步代码 console.log(‘2’),发现 process.nextTick，加入微任务 Event Queue\n5、new Promise，同步执行 console.log(‘4’),发现 then，加入微任务 Event Queue 6、宏任务执行完毕，接下来执行微任务，先执行 process.nextTick，然后执行 Promise.then 7、微任务执行完毕，第二轮事件循环走完，没有发现宏任务，事件循环结束")]),e._v(" "),t("h2",{attrs:{id:"_16、js-防抖和节流-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16、js-防抖和节流-必会"}},[e._v("#")]),e._v(" 16、js 防抖和节流(必会)")]),e._v(" "),t("p",[e._v("在进行窗口的 resize、scroll，输入框内容校验等操作时，如果事件处理函数调用的频率无限制， 会加重浏览器的负担，导致用户体验非常糟糕\n此时我们可以采用 debounce(防抖)和 throttle(节流)的方式来减少调用频率，同时又不影响 实际效果")]),e._v(" "),t("p",[e._v("函数防抖: 函数防抖(debounce):当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一")]),e._v(" "),t("p",[e._v("次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时\n如下，持续触发 scroll 事件时，并不执行 handle 函数，当 1000 毫秒内没有触发 scroll 事件时，才会延")]),e._v(" "),t("p",[e._v("时触发 scroll 事件")]),e._v(" "),t("p",[e._v("function debounce(fn, wait) { var timeout = null;")]),e._v(" "),t("p",[e._v("return function() {\nif(timeout !== null) clearTimeout(timeout);")]),e._v(" "),t("p",[e._v("timeout = setTimeout(fn, wait); }")]),e._v(" "),t("p",[e._v("} // 处理函数 function handle() {")]),e._v(" "),t("p",[e._v("console.log(Math.random()); }")]),e._v(" "),t("p",[e._v("// 滚动事件 window.addEventListener('scroll', debounce(handle, 1000));")]),e._v(" "),t("p",[e._v("函数节流(throttle):\n当持续触发事件时，保证一定时间段内只调用一次事件处理函数 节流通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优 良 传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内 一 滴一滴的往下滴")]),e._v(" "),t("p",[e._v("如下，持续触发 scroll 事件时，并不立即执行 handle 函数，每隔 1000 毫秒才会执行一次 handle 函数\nvar throttle =function(func, delay) {")]),e._v(" "),t("p",[e._v("var prev = Date.now(); return function() {\nvar context = this;\nvar args = arguments; var now = Date.now();")]),e._v(" "),t("p",[e._v("if (now - prev >= delay) { func.apply(context, args); prev = Date.now();")]),e._v(" "),t("p",[e._v("} }")]),e._v(" "),t("p",[e._v("}\nfunction handle() {console.log(Math.random());} window.addEventListener('scroll', throttle(handle, 1000)); 总结:")]),e._v(" "),t("p",[e._v("函数防抖: 将几次操作合并为一此操作进行。原理是维护一个计时器，规定在延迟时间后触发函数，但是在 延迟时间内再次触发的话，就会取消之前的计时器而重新设置。只有最后一次操作能被触发")]),e._v(" "),t("p",[e._v("函数节流: 使得一定时间内只触发一次函数。原理是通过判断是否到达一定时间来触发函数")]),e._v(" "),t("p",[e._v("区别: 函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数， 而函数防抖只是在最后一次事件后才触发一次函数。")]),e._v(" "),t("p",[e._v("结合应用场景 防抖(debounce)")]),e._v(" "),t("p",[e._v("search 搜索联想，用户在不断输入值时，用防抖来节约请求资源。")]),e._v(" "),t("p",[e._v("window 触发 resize 的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让 其只触发一次")]),e._v(" "),t("p",[e._v("节流(throttle)\n鼠标不断点击触发，mousedown(单位时间内只触发一次) 监听滚动事件，比如是否滑到底部自动加载更多，用 throttle 来判断")]),e._v(" "),t("h2",{attrs:{id:"_17、new-操作符具体干了什么呢-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17、new-操作符具体干了什么呢-必会"}},[e._v("#")]),e._v(" 17、new 操作符具体干了什么呢?(必会)")]),e._v(" "),t("p",[e._v("1、创建一个空对象: 并且 this 变量引入该对象,同时还继承了函数的原型 2、设置原型链 空对象指向构造函数的原型对象\n3、执行函数体 修改构造函数 this 指针指向空对象,并执行函数体 4、判断返回值 返回对象就用该对象,没有的话就创建一个对象")]),e._v(" "),t("h2",{attrs:{id:"_18、用-javascript-实现冒泡排序。数据为-23、45、18、37、92、13、-24-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18、用-javascript-实现冒泡排序。数据为-23、45、18、37、92、13、-24-必会"}},[e._v("#")]),e._v(" 18、用 JavaScript 实现冒泡排序。数据为 23、45、18、37、92、13、 24 (必会)")]),e._v(" "),t("p",[e._v("//升序算法 function sort(arr){")]),e._v(" "),t("p",[e._v("for (var i = 0; i <arr.length; i++) {\nfor (var j = 0; j <arr.length-i; j++) {")]),e._v(" "),t("p",[e._v("if(arr[j]>arr[j+1]) {\nvar c=arr[j];//交换两个变量的位置 arr[j]=arr[j+1];\narr[j+1]=c;")]),e._v(" "),t("p",[e._v("} };")]),e._v(" "),t("p",[e._v("};")]),e._v(" "),t("p",[e._v("return arr.toString(); }")]),e._v(" "),t("p",[e._v("console.log(sort([23,45,18,37,92,13,24]));")]),e._v(" "),t("h2",{attrs:{id:"_19、用-js-实现随机选取-10-100-之间的-10-个数字-存入一个数组并-排序-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19、用-js-实现随机选取-10-100-之间的-10-个数字-存入一个数组并-排序-必会"}},[e._v("#")]),e._v(" 19、用 js 实现随机选取 10–100 之间的 10 个数字，存入一个数组并 排序(必会)")]),e._v(" "),t("p",[e._v("function randomNub(aArray, len, min, max) { if (len >= (max - min)) {")]),e._v(" "),t("p",[e._v("return '超过' + min + '-' + max + '之间的个数范围' + (max - min - 1) + '个 的总数';")]),e._v(" "),t("p",[e._v("}\nif (aArray.length >= len) {")]),e._v(" "),t("p",[e._v("aArray.sort(function(a, b) { return a - b")]),e._v(" "),t("p",[e._v("});")]),e._v(" "),t("p",[e._v("return aArray; }")]),e._v(" "),t("p",[e._v("var nowNub = parseInt(Math.random() * (max - min - 1)) + (min + 1);")]),e._v(" "),t("p",[e._v("for (var j = 0; j < aArray.length; j++) { if (nowNub == aArray[j]) {")]),e._v(" "),t("p",[e._v("randomNub(aArray, len, min, max);")]),e._v(" "),t("p",[e._v("return; }")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("p",[e._v("aArray.push(nowNub); randomNub(aArray, len, min, max); return aArray;")]),e._v(" "),t("p",[e._v("}\nvar arr=[]; randomNub(arr,10,10,100);")]),e._v(" "),t("h2",{attrs:{id:"_20、已知数组-var-stringarray-this-is-baidu-campus-alert-出-this-is-baidu-campus-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20、已知数组-var-stringarray-this-is-baidu-campus-alert-出-this-is-baidu-campus-必会"}},[e._v("#")]),e._v(" 20、已知数组 var stringArray = [“This”,“is”, “Baidu”,“Campus”]， Alert 出”This is Baidu Campus”(必会)")]),e._v(" "),t("p",[e._v('var stringArray = ["This", "is", "Baidu", "Campus"] alert(stringArray.join(""))')]),e._v(" "),t("h2",{attrs:{id:"_21、已知有字符串-foo-get-element-by-id-写一个-function-将其-转化成驼峰表示法-getelementbyid-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21、已知有字符串-foo-get-element-by-id-写一个-function-将其-转化成驼峰表示法-getelementbyid-必会"}},[e._v("#")]),e._v(" 21、已知有字符串 foo=”get-element-by-id”,写一个 function 将其 转化成驼峰表示法”getElementById”(必会)")]),e._v(" "),t("p",[e._v('function combo(msg){\nvar arr=msg.split("-"); for(var i=1;i<arr.length;i++){')]),e._v(" "),t("p",[e._v("arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1); }")]),e._v(" "),t("p",[e._v('msg=arr.join(""); return msg;\n}')]),e._v(" "),t("h2",{attrs:{id:"_22-、-有-这-样-一-个-http-item-taobao-com-item-htm-a-1-b-2-c-d-xxx-e-请写一段-js-程序提取-url-中的各个-get-参数-参数名和参数个数不确定-将-其按-key-value-形式返回到一个-json-结构中-如-a-1-b-2-c-d-xxx-e-undefined-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-、-有-这-样-一-个-http-item-taobao-com-item-htm-a-1-b-2-c-d-xxx-e-请写一段-js-程序提取-url-中的各个-get-参数-参数名和参数个数不确定-将-其按-key-value-形式返回到一个-json-结构中-如-a-1-b-2-c-d-xxx-e-undefined-必会"}},[e._v("#")]),e._v(' 22 、 有 这 样 一 个 http://item.taobao.com/item.htm?a=1&b=2&c=&d=xxx&e，请写一段 JS 程序提取 URL 中的各个 GET 参数(参数名和参数个数不确定)，将 其按 key-value 形式返回到一个 json 结构中，如{a: "1", b: "2", c: "", d: "xxx", e: undefined}(必会)')]),e._v(" "),t("p",[e._v("function serilizeUrl(url) { var urlObject = {};")]),e._v(" "),t("p",[e._v('if (/?/.test(url)) {\nvar urlString = url.substring(url.indexOf("?") + 1); var urlArray = urlString.split("&");')]),e._v(" "),t("p",[e._v("URL :")]),e._v(" "),t("p",[e._v('for (var i = 0, len = urlArray.length; i < len; i++) { var urlItem = urlArray[i];\nvar item = urlItem.split("="); urlObject[item[0]] = item[1];')]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("p",[e._v("return urlObject; }")]),e._v(" "),t("p",[e._v("return null; }")]),e._v(" "),t("h2",{attrs:{id:"_23、输出今天的日期-以-yyyy-mm-dd-的方式-比如今天是-2014-年-9-月-26-日-则输出-2014-09-26-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23、输出今天的日期-以-yyyy-mm-dd-的方式-比如今天是-2014-年-9-月-26-日-则输出-2014-09-26-必会"}},[e._v("#")]),e._v(" 23、输出今天的日期，以 YYYY-MM-DD 的方式，比如今天是 2014 年 9 月 26 日，则输出 2014-09-26(必会)")]),e._v(" "),t("p",[e._v("var d = new Date();\n// 获取年，getFullYear()返回 4 位的数字\nvar year = d.getFullYear();\n// 获取月，月份比较特殊，0 是 1 月，11 是 12 月 var month = d.getMonth() + 1;\n// 变成两位\nmonth = month < 10 ? '0' + month : month;\n// 获取日\nvar day = d.getDate();\nday = day < 10 ? '0' + day : day;")]),e._v(" "),t("p",[e._v("alert(year + '-' + month + '-' + day);}")]),e._v(" "),t("h2",{attrs:{id:"_24、把两个数组合并-并删除第二个元素。-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24、把两个数组合并-并删除第二个元素。-必会"}},[e._v("#")]),e._v(" 24、把两个数组合并，并删除第二个元素。(必会)")]),e._v(" "),t("p",[e._v("var array1 = ['a','b','c'];\nvar bArray = ['d','e','f'];\nvar cArray = array1.concat(bArray); cArray.splice(1,1);")]),e._v(" "),t("h2",{attrs:{id:"_25、写一个-function-清除字符串前后的空格。-兼容所有浏览器-必-会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25、写一个-function-清除字符串前后的空格。-兼容所有浏览器-必-会"}},[e._v("#")]),e._v(" 25、写一个 function，清除字符串前后的空格。(兼容所有浏览器)(必 会)")]),e._v(" "),t("p",[e._v("//使用自带接口 trim()，考虑兼容性: if (!String.prototype.trim) { String.prototype.trim = function() {")]),e._v(" "),t("p",[e._v('return this.replace(/^\\s+/, "").replace(/\\s+$/,""); }')]),e._v(" "),t("p",[e._v('}\n// test the function\nvar str = " \\t\\n test string ".trim(); alert(str == "test string"); // alerts "true"')]),e._v(" "),t("h2",{attrs:{id:"_26、截取字符串-abcdefg-的-efg-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26、截取字符串-abcdefg-的-efg-必会"}},[e._v("#")]),e._v(" 26、截取字符串 abcdefg 的 efg (必会)")]),e._v(" "),t("p",[e._v("alert('abcdefg'.substring(4));")]),e._v(" "),t("h2",{attrs:{id:"_27、判断一个字符串中出现次数最多的字符-统计这个次数-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27、判断一个字符串中出现次数最多的字符-统计这个次数-必会"}},[e._v("#")]),e._v(" 27、判断一个字符串中出现次数最多的字符，统计这个次数(必会)")]),e._v(" "),t("p",[e._v("var str = 'asdfssaaasasasasaa'; var json = {};\nfor (var i = 0; i < str.length; i++) {")]),e._v(" "),t("p",[e._v("if(!json[str.charAt(i)]){ json[str.charAt(i)] = 1;")]),e._v(" "),t("p",[e._v("}else{ json[str.charAt(i)]++;")]),e._v(" "),t("p",[e._v("} };")]),e._v(" "),t("p",[e._v("var iMax = 0; var iIndex = ''; for(var i in json){")]),e._v(" "),t("p",[e._v("if(json[i]>iMax){ iMax = json[i]; iIndex = i;\n}")]),e._v(" "),t("p",[e._v("} alert('出现次数最多的是:'+iIndex+'出现'+iMax+'次');")]),e._v(" "),t("h2",{attrs:{id:"_28、将数字-12345678-转化成-rmb-形式-如-12-345-678-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28、将数字-12345678-转化成-rmb-形式-如-12-345-678-必会"}},[e._v("#")]),e._v(" 28、将数字 12345678 转化成 RMB 形式 如: 12,345,678 (必会)")]),e._v(" "),t("p",[e._v("//思路:先将数字转为字符， str= str + '' ;\n//利用反转函数，每三位字符加一个 ','最后一位不加; re()是自定义的反转函数，最后再反转回去! for(var i = 1; i <= re(str).length; i++){\ntmp += re(str)[i - 1];")]),e._v(" "),t("p",[e._v("if(i % 3 == 0 && i != re(str).length){ tmp += ',';")]),e._v(" "),t("p",[e._v("} }")]),e._v(" "),t("h2",{attrs:{id:"_29、split-和-join-的区别-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29、split-和-join-的区别-必会"}},[e._v("#")]),e._v(" 29、split()和 join()的区别?(必会)")]),e._v(" "),t("p",[e._v("split()是把一串字符(根据某个分隔符)分成若干个元素存放在一个数组里 即切割成数组的形式;\njoin() 是把数组中的字符串连成一个长串，可以大体上认为是 split()的逆操作")]),e._v(" "),t("h2",{attrs:{id:"_30、javascript-中如何对一个对象进行深度-clone-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30、javascript-中如何对一个对象进行深度-clone-必会"}},[e._v("#")]),e._v(" 30、JavaScript 中如何对一个对象进行深度 clone?(必会)")]),e._v(" "),t("p",[e._v("<!doctype html> ")]),t("html",[t("head",[t("meta",{attrs:{charset:"utf-8"}}),e._v(" "),t("title",[e._v("深克隆")]),e._v(" "),t("script",[e._v("  function clone(obj)  {  if(typeof obj==‘object‘) {  if(obj instanceof Array)  {</p>\n<p>var result=[];\nfor(var i=0;i&lt;obj.length;i++)</p>\n<p>{ result[i]=clone(obj[i]);</p>\n<p>} return result;</p>\n<p>} else {</p>\n<p>var result={}; for(var i in obj)</p>\n<p>{ result[i]=clone(obj[i]);</p>\n<p>} return result;</p>\n<p>}\n}\nelse\n{\nreturn obj; }</p>\n<p>}\nvar obj1=[12, {a: 11, b: 22}, 5];</p>\n<p>var obj2=clone(obj1); obj2[1].a+=5;</p>\n<p>console.log(obj1, obj2); ")]),t("p")]),e._v(" "),t("body")]),e._v(" "),t("h2",{attrs:{id:"_31、js-数组去重-能用几种方法实现-必会"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31、js-数组去重-能用几种方法实现-必会"}},[e._v("#")]),e._v(" 31、js 数组去重，能用几种方法实现(必会)")]),e._v(" "),t("p",[e._v("1、使用 es6 set 方法 [...new Set(arr)]\nlet arr = [1,2,3,4,3,2,3,4,6,7,6]; letunique=(arr)=> [...newSet(arr)];")]),e._v(" "),t("p",[e._v("unique(arr);//[1, 2, 3, 4, 6, 7]\n2、利用新数组 indexOf 查找 indexOf() 方法可返回某个指定的元素在数组中首次出现的位置。如 果没有就返回-1。\n3、for 双重循环 通过判断第二层循环，去重的数组中是否含有该元素，如果有就退出第二 层 循环，如果没有 j==result.length 就相等，然后把对应的元素添加到最后的数组里面。\nlet arr = [1,2,3,4,3,2,3,4,6,7,6];\nlet result = [];")]),e._v(" "),t("p",[e._v("for(var i = 0 ; i < arr.length; i++) { for(var j = 0 ; j < result.length ; j++) {")]),e._v(" "),t("p",[e._v("if(arr[i] === result[j]){ break;")]),e._v(" "),t("p",[e._v("}; };")]),e._v(" "),t("p",[e._v("if(j == result.length){ result.push(arr[i]);")]),e._v(" "),t("p",[e._v("};\n}; console.log(result);")]),e._v(" "),t("p",[e._v("4、利用 for 嵌套 for，然后 splice 去重 functionunique(arr){")]),e._v(" "),t("p",[e._v("for(vari=0; i<arr.length; i++){\nfor(var j=i+1; j<arr.length; j++){")]),e._v(" "),t("p",[e._v("if(arr[i]==arr[j]) {\n//第一个等同于第二个，splice 方法删除第二个")]),e._v(" "),t("p",[e._v("arr.splice(j,1); j--; }")]),e._v(" "),t("p",[e._v("} }")]),e._v(" "),t("p",[e._v("return arr; }")]),e._v(" "),t("p",[e._v("5、利用 filter\nlet arr = [1,2,3,4,3,2,3,4,6,7,6];")]),e._v(" "),t("p",[e._v("let unique = (arr) => {\nreturn arr.filter((item,index) => {")]),e._v(" "),t("p",[e._v("return arr.indexOf(item) === index; })")]),e._v(" "),t("p",[e._v("};\nunique(arr);")]),e._v(" "),t("p",[e._v("6、利用 Map 数据结构去重 let arr = [1,2,3,4,3,2,3,4,6,7,6];")]),e._v(" "),t("p",[e._v("let unique = (arr)=> { let seen = new Map();")]),e._v(" "),t("p",[e._v("return arr.filter((item) => {\nreturn !seen.has(item) && seen.set(item,1);")]),e._v(" "),t("p",[e._v("}); };")]),e._v(" "),t("p",[e._v("unique(arr);")]),e._v(" "),t("h2",{attrs:{id:"_32、谈谈你对-javascript-垃圾回收机制的理解-高薪常问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32、谈谈你对-javascript-垃圾回收机制的理解-高薪常问"}},[e._v("#")]),e._v(" 32、谈谈你对 Javascript 垃圾回收机制的理解?(高薪常问)")]),e._v(" "),t("p",[e._v("1、标记清除(mark and sweep)\n这是 JavaScript 最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量， 垃圾回收器将其标记为“进入环境”，当变量离开环境的时候(函数执行结束)将其标记为“离 开环境” 垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被 环境中变量所引用的变量(闭包)，在这些完成之后仍存在标记的就是要删除的变量了")]),e._v(" "),t("p",[e._v("2、引用计数(reference counting)\n在低版本 IE 中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引")]),e._v(" "),t("p",[e._v("用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该 变量的时候这个值的引用次数就加 1，如果该变量的值变成了另外一个，则这个值得引用次数减 1，当这个值的引用次数变为 0 的时 候，说明没有变量在使用，这个值没法被访问了，因此可以 将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为 0 的值占用的空间")]),e._v(" "),t("p",[e._v("在 IE 中虽然 JavaScript 对象通过标记清除的方式进行垃圾回收，但 BOM 与 DOM 对象却是通过 引用计数回收垃圾的，也就是说只要涉及 BOM 及 DOM 就会出现循环引用问题")]),e._v(" "),t("h2",{attrs:{id:"_33、class-和普通构造函数有何区别-高薪常问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33、class-和普通构造函数有何区别-高薪常问"}},[e._v("#")]),e._v(" 33、class 和普通构造函数有何区别?(高薪常问)")]),e._v(" "),t("p",[e._v("Js 构造函数:")]),e._v(" "),t("p",[e._v("function MathHandle(x,y){ this.x=x")]),e._v(" "),t("p",[e._v("this.y=y }")]),e._v(" "),t("p",[e._v("MathHandle.prototype.add=function(){ return this.x+this.y\n}\nvar m =new MathHandle(1,2)")]),e._v(" "),t("p",[e._v("console.log(m.add())")]),e._v(" "),t("p",[e._v("class 基本语法: class MathHandle{")]),e._v(" "),t("p",[e._v("constructor(x,y){ this.x = x this.y = y")]),e._v(" "),t("p",[e._v("} add(){")]),e._v(" "),t("p",[e._v("return this.x + this.y }")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("p",[e._v("const m = new MathHandle(1,2) console.log(m.add())")]),e._v(" "),t("p",[e._v("语法糖:\n在上述两段代码中分别加入如下代码，运行\nconsole.log(typeof MathHandle) // 'function' console.log(MathHandle.prototype.constructor === MathHandle) //true console.log(m."),t("strong",[e._v("proto")]),e._v(" === MathHandle.prototype) //true")]),e._v(" "),t("p",[e._v("运行结果一致。我认为，class 是构造函数的语法糖 综上所述:\nclass 在语法上更加贴合面向对象的写法\nclass 实现继承更加易读、易理解")]),e._v(" "),t("p",[e._v("更易于写 java 等后端语言的使用 本质还是语法糖，使用 prototype")]),e._v(" "),t("h2",{attrs:{id:"_34、js-里垃圾回收机制是什么-常用的是哪种-怎么处理的-高-薪常问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34、js-里垃圾回收机制是什么-常用的是哪种-怎么处理的-高-薪常问"}},[e._v("#")]),e._v(" 34、JS 里垃圾回收机制是什么，常用的是哪种，怎么处理的?(高 薪常问)")]),e._v(" "),t("p",[e._v("JS 的垃圾回收机制是为了以防内存泄漏，内存泄漏的含义就是当已经不需要某块内存时这块内 存还存在着，垃圾回收机制就是间歇的不定期的寻找到不再使用的变量，并释放掉它们所指向的 内存\nJS 中最常见的垃圾回收方式是标记清除")]),e._v(" "),t("p",[e._v("工作原理:是当变量进入环境时，将这个变量标记为“进入环境”。当变量离开环境时，则将其 标记为“离开环境”。标记“离开环境”的就回收内存")]),e._v(" "),t("p",[e._v("工作流程:\n垃圾回收器，在运行的时候会给存储在内存中的所有变量都加上标记 去掉环境中的变量以及被环境中的变量引用的变量的标记 再被加上标记的会被视为准备删除的变量 垃圾回收器完成内存清除工作，销毁那些带标记的值并回收他们所占用的内存空间")]),e._v(" "),t("h2",{attrs:{id:"_35、什么是进程、什么是线程、它们之间是什么关系-了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35、什么是进程、什么是线程、它们之间是什么关系-了解"}},[e._v("#")]),e._v(" 35、什么是进程、什么是线程、它们之间是什么关系(了解)")]),e._v(" "),t("p",[e._v("1、进程: 1.1)程序执行时的一个实例")]),e._v(" "),t("p",[e._v("1.2)每个进程都有独立的内存地址空间\n1.3)系统进行资源分配和调度的基本单位 1.4)进程里的堆，是一个进程中最大的一块内存，被进程中的所有线程共享的，进程")]),e._v(" "),t("p",[e._v("创建时分配，主要存放 new 创建的对象实例 1.5)进程里的方法区，是用来存放进程中的代码片段的，是线程共享的")]),e._v(" "),t("p",[e._v("1.6)在多线程 OS 中，进程不是一个可执行的实体，即一个进程至少创建一个线程 去执行代码")]),e._v(" "),t("p",[e._v("2、线程:\n2.1)进程中的一个实体\n2.2)进程的一个执行路径\n2.3)CPU 调度和分派的基本单位\n2.4)线程本身是不会独立存在\n2.5)当前线程 CPU 时间片用完后，会让出 CPU 等下次轮到自己时候在执行 2.6)系统不会为线程分配内存，线程组之间只能共享所属进程的资源 2.7)线程只拥有在运行中必不可少的资源(如程序计数器、栈) 2.8)线程里的程序计数器就是为了记录该线程让出 CPU 时候的执行地址，待再次分配到 时间片时候就可以从自己私有的计数器指定地址继续执行 2.9)每个线程有自己的栈资源，用于存储该线程的局部变量和调用栈帧，其它线程 无")]),e._v(" "),t("p",[e._v("权访问")]),e._v(" "),t("p",[e._v("3、关系: 3.1)一个程序至少一个进程，一个进程至少一个线程，进程中的多个线程是共享进 程")]),e._v(" "),t("p",[e._v("的资源\n3.2)Java 中当我们启动 main 函数时候就启动了一个 JVM 的进程，而 main 函数所在线")]),e._v(" "),t("p",[e._v("程就是这个进程中的一个线程，也叫做主线程 3.3)一个进程中有多个线程，多个线程共享进程的堆和方法区资源，但是每个线程 有")]),e._v(" "),t("p",[e._v("自己的程序计数器，栈区域")]),e._v(" "),t("h2",{attrs:{id:"_36、什么是任务队列-了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36、什么是任务队列-了解"}},[e._v("#")]),e._v(" 36、什么是任务队列?(了解)")]),e._v(" "),t("p",[e._v("任务队列(task queue)主要分两种: 1、宏任务(macrotask):在新标准中叫 task")]),e._v(" "),t("p",[e._v("1.1)主要包括:script(整体代码)，setTimeout，setInterval，setImmediate，I/O，ui rendering 2、微任务(microtask):在新标准中叫 jobs")]),e._v(" "),t("p",[e._v("2.1)主要包括:process.nextTick， Promise，MutationObserver(html5 新特性) 3、扩展:")]),e._v(" "),t("p",[e._v("3.1)同步任务:在主线程上，排队执行的任务，只有前一个任务执行完毕，才能执 行后一个任务")]),e._v(" "),t("p",[e._v("3.2)异步任务:不进入主线程，而进入“任务队列”的任务，只有“任务队列” 通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行")]),e._v(" "),t("h2",{attrs:{id:"_37、栈和队列的区别-了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37、栈和队列的区别-了解"}},[e._v("#")]),e._v(" 37、栈和队列的区别?(了解)")]),e._v(" "),t("p",[e._v("1、栈的插入和删除操作都是在一端进行的，而队列的操作却是在两端进行的 2、队列先进先出，栈先进后出 3、栈只允许在一端进行插入和删除，而队列允许在一端进行插入，在另一端进行删除#")]),e._v(" "),t("h2",{attrs:{id:"_38、栈和堆的区别-了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_38、栈和堆的区别-了解"}},[e._v("#")]),e._v(" 38、栈和堆的区别?(了解)")]),e._v(" "),t("p",[e._v("1、栈区(stack)— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。 堆 区(heap) — 一般由程序员分配释放， 若程序员不释放，程序结束时可能由 OS 回收")]),e._v(" "),t("p",[e._v("2、堆(数据结构):堆可以被看成是一棵树，如:堆排序; 栈(数据结构):一种先进后 出的数据结构")])])}),[],!1,null,null,null);t.default=v.exports}}]);